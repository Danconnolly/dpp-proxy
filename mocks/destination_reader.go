// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/libsv/pptcl"
	"sync"
)

// Ensure, that DestinationReaderMock does implement pptcl.DestinationReader.
// If this is not the case, regenerate this file with moq.
var _ pptcl.DestinationReader = &DestinationReaderMock{}

// DestinationReaderMock is a mock implementation of pptcl.DestinationReader.
//
// 	func TestSomethingThatUsesDestinationReader(t *testing.T) {
//
// 		// make and configure a mocked pptcl.DestinationReader
// 		mockedDestinationReader := &DestinationReaderMock{
// 			DestinationsFunc: func(ctx context.Context, args pptcl.PaymentRequestArgs) (*pptcl.Destinations, error) {
// 				panic("mock out the Destinations method")
// 			},
// 		}
//
// 		// use mockedDestinationReader in code that requires pptcl.DestinationReader
// 		// and then make assertions.
//
// 	}
type DestinationReaderMock struct {
	// DestinationsFunc mocks the Destinations method.
	DestinationsFunc func(ctx context.Context, args pptcl.PaymentRequestArgs) (*pptcl.Destinations, error)

	// calls tracks calls to the methods.
	calls struct {
		// Destinations holds details about calls to the Destinations method.
		Destinations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Args is the args argument value.
			Args pptcl.PaymentRequestArgs
		}
	}
	lockDestinations sync.RWMutex
}

// Destinations calls DestinationsFunc.
func (mock *DestinationReaderMock) Destinations(ctx context.Context, args pptcl.PaymentRequestArgs) (*pptcl.Destinations, error) {
	if mock.DestinationsFunc == nil {
		panic("DestinationReaderMock.DestinationsFunc: method is nil but DestinationReader.Destinations was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Args pptcl.PaymentRequestArgs
	}{
		Ctx:  ctx,
		Args: args,
	}
	mock.lockDestinations.Lock()
	mock.calls.Destinations = append(mock.calls.Destinations, callInfo)
	mock.lockDestinations.Unlock()
	return mock.DestinationsFunc(ctx, args)
}

// DestinationsCalls gets all the calls that were made to Destinations.
// Check the length with:
//     len(mockedDestinationReader.DestinationsCalls())
func (mock *DestinationReaderMock) DestinationsCalls() []struct {
	Ctx  context.Context
	Args pptcl.PaymentRequestArgs
} {
	var calls []struct {
		Ctx  context.Context
		Args pptcl.PaymentRequestArgs
	}
	mock.lockDestinations.RLock()
	calls = mock.calls.Destinations
	mock.lockDestinations.RUnlock()
	return calls
}
